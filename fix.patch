diff --git a/main.py b/main.py
@@
-.*                                                                                    
+"""Planner #vendo – główny moduł"""
+from __future__ import annotations
+
+import datetime as dt, pytz, re
+from collections import defaultdict
+import logger
+
+from config import (
+    TIMEZONE, LOG_BACK_DAYS, LOG_FORWARD_DAYS, FREEZE_DAYS,
+    COLOR_OVERDUE, COLOR_DONE, COLOR_NORMAL, BUSY_CALENDARS,
+)
+from gcal_api import (
+    get_service, list_events, list_events_multi,
+    update_event_time, create_event,
+)
+from utils import parse_tags
+from vendo_api import save_snapshot
+from scheduler import schedule
+
+tz      = pytz.timezone(TIMEZONE)
+iso_dt  = dt.datetime.fromisoformat
+
+# ------------------------------------------------------------------ #
+#  Pomocnicze
+
+def range_dates(back: int, fwd: int) -> tuple[dt.date, dt.date]:
+    today = dt.date.today()
+    return today - dt.timedelta(days=back), today + dt.timedelta(days=fwd)
+
+def tasks_from_events(events):
+    tasks = []
+    for ev in events:
+        desc = ev.get("description", "") or ""
+        tags = parse_tags(desc)
+        if not tags["vendo"]:
+            continue
+        m = re.search(r"#age(\\d+)", desc, re.I)
+        if m:
+            tags["age"] = int(m.group(1))
+        tasks.append({
+            **tags,
+            "event_id": ev.get("id"),
+            "summary":  ev.get("summary", ""),
+            "description": desc,
+            "start": ev["start"].get("dateTime"),
+            "end":   ev["end"].get("dateTime"),
+        })
+    return tasks
+
+def busy_map(events):
+    mp = defaultdict(list)
+    for ev in events:
+        desc = (ev.get("description") or "").lower()
+        if "#done" in desc:
+            continue
+        s_iso = ev["start"].get("dateTime")
+        e_iso = ev["end"].get("dateTime")
+        if not s_iso or not e_iso:
+            continue
+        s = iso_dt(s_iso); e = iso_dt(e_iso)
+        mp[s.date()].append({"start": s, "end": e})
+    return mp
+
+def color(is_done, late):
+    if is_done:
+        return COLOR_DONE
+    if late > 0:
+        return COLOR_OVERDUE
+    return COLOR_NORMAL
+
+# ------------------------------------------------------------------ #
+#  Główna funkcja
+
+def run() -> None:
+    run_id = logger.new_run_id()
+    trace  = [f"run {run_id} start"]
+
+    svc   = get_service()
+    start, end = range_dates(LOG_BACK_DAYS, LOG_FORWARD_DAYS)
+    tmin  = tz.localize(dt.datetime.combine(start, dt.time.min))
+    tmax  = tz.localize(dt.datetime.combine(end,   dt.time.max))
+
+    all_ev = list_events(svc, tmin, tmax)
+    trace.append(f"list_events => {len(all_ev)} ev")
+
+    vendo = [e for e in all_ev
+             if "#vendo" in ((e.get("description") or "").lower())]
+    other_events = list_events_multi(svc, BUSY_CALENDARS, tmin, tmax)
+    others = [e for e in other_events
+              if "#vendo" not in ((e.get("description") or "").lower())]
+
+    trace.append(f"vendo => {len(vendo)}")
+    trace.append(f"other_events => {len(other_events)}")
+
+    tasks = tasks_from_events(vendo)
+    for t in tasks:
+        t["age"] = t.get("age", 0) + 1
+    save_snapshot(tasks)
+    trace.append(f"tasks => {len(tasks)}")
+
+    # --- zamrożone vs ruchome (FREEZE_DAYS) ---
+    today   = dt.date.today()
+    locked, movable = [], []
+    for t in tasks:
+        if t["start"] and not t.get("done"):
+            d = iso_dt(t["start"]).date()
+            if (d - today).days < FREEZE_DAYS:
+                locked.append(t); continue
+        movable.append(t)
+    trace.append(f"locked => {len(locked)} / movable => {len(movable)}")
+
+    # --- unfreeze kolizje ---
+    def _overlap(a_s, a_e, b_s, b_e):
+        return not (a_e <= b_s or b_e <= a_s)
+
+    unfreeze=[]
+    for t in locked[:]:
+        a_s = iso_dt(t["start"]); a_e = iso_dt(t["end"])
+        for ev in other_events:
+            rs = ev["start"].get("dateTime") or ev["start"].get("date")
+            re = ev["end"].get("dateTime")   or ev["end"].get("date")
+            if not (rs and re):
+                continue
+            if "T" not in rs:
+                day = dt.date.fromisoformat(rs)
+                b_s = tz.localize(dt.datetime.combine(day, dt.time(8)))
+                b_e = tz.localize(dt.datetime.combine(day, dt.time(16)))
+            else:
+                b_s = iso_dt(rs); b_e = iso_dt(re)
+            if _overlap(a_s, a_e, b_s, b_e):
+                unfreeze.append(t); break
+    for t in unfreeze:
+        locked.remove(t); movable.append(t)
+    trace.append(f"unfreeze => {len(unfreeze)}")
+
+    # --- schedule ---
+    busy       = busy_map(others)
+    scheduled, _late = schedule(movable, busy)
+    trace.append(f"scheduled => {len(scheduled)}")
+
+    # --- akcje ---
+    actions=[]
+    def log(a): actions.append(a)
+
+    for t, s, e in scheduled:
+        late = max(0, (s.date() - (t.get("due") or s.date())).days)
+        col  = color(t.get("done"), late)
+        desc = t["description"]
+
+        if t.get("event_id"):
+            update_event_time(
+                svc, t["event_id"], s, e,
+                color_id   = col,
+                description= desc,
+            )
+            log({"type": "move", "id": t["event_id"], "late": late})
+        else:
+            ev = create_event(svc, t["summary"] or "Task", s, e, col, desc)
+            log({"type": "create", "id": ev["id"], "late": late})
+
+    # --- zapis logu ---
+    snap_before = [logger.event_to_dict(e) for e in all_ev]
+    snap_after  = [logger.event_to_dict(e)
+                   for e in list_events(svc, tmin, tmax)]
+
+    plan = {
+        "locked":   [t["summary"] for t in locked],
+        "movable":  [t["summary"] for t in movable],
+        "scheduled":[t["summary"] for t,_,_ in scheduled],
+    }
+
+    logger.log_run_snapshot("snapshot_before", {"run": run_id, "events": snap_before})
+    logger.log_run_snapshot("actions",        {"run": run_id, "list": actions})
+    logger.log_run_snapshot("snapshot_after", {"run": run_id, "events": snap_after})
+    logger.log_run_snapshot("trace",          {"run": run_id, "steps": trace})
+    logger.log_run_snapshot("plan",           {"run": run_id, **plan})
+
+    print(f"[run {run_id}] Akcje: {len(actions)}")
+
+if __name__ == "__main__":
+    try:
+        run()
+    except Exception as e:
+        logger.LOGGER.exception("fatal error", {"error": str(e)})
+        raise
